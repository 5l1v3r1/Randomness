#!/usr/bin/python
# simpleFisher.py - Is exactly what is sound like. A simple tool to send phishing emails.
# v1.0 2017/07/07
#
# Copyright (C); 2017 jnqpblc - jnqpblc at gmail
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option); any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import smtplib
import sys, os, argparse
from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email.Utils import COMMASPACE, formatdate
from email import Encoders

def send_plain_mail(smtp_server, smtp_port, start_tls, ehlo_name, email_body_file, email_attachment_file, email_subject, send_from, show_from, send_to):

   timeout = 10

   msg = MIMEMultipart()
   msg['From'] = show_from
   #msg['From'] = '"' + show_from + '" <' + show_from + '>'
   msg['To'] = send_to
   msg['Date'] = formatdate(localtime=True)
   msg['Subject'] = email_subject

   fp = open(email_body_file, 'r')
   msg.attach(MIMEText(fp.read()))
   fp.close()

   part = MIMEBase('application', "octet-stream")
   part.set_payload(open(email_attachment_file, "rb").read())
   Encoders.encode_base64(part)
   part.add_header('Content-Disposition', 'attachment; filename="%s"' % os.path.basename(email_attachment_file))
   msg.attach(part)

   print "[+] Attempting to connect to server"
   timeout = 10
   smtp = smtplib.SMTP(smtp_server, smtp_port, timeout)
   if (start_tls):
      print "[+] Attempting to use STARTTLS"
      smtp.starttls()
   print "[+] Attempting to say ehlo"
   smtp.ehlo(ehlo_name)
   print "[+] Attempting to send mail"
   smtp.sendmail(send_from, send_to, msg.as_string())
   smtp.close()
   print "[+] Done..."

def send_html_mail(smtp_server, smtp_port, start_tls, ehlo_name, email_body_file, email_attachment_file, email_subject, send_from, show_from, send_to):

   msg = MIMEMultipart('alternative')
   msg['From'] = show_from
   #msg['From'] = '"' + show_from + '" <' + show_from + '>'
   msg['To'] = send_to
   msg['Date'] = formatdate(localtime=True)
   msg['Subject'] = email_subject

   fp = open(email_body_file, 'r')
   msg.attach(MIMEText(fp.read(), 'html'))
   fp.close()

   part = MIMEBase('application', "octet-stream")
   part.set_payload(open(email_attachment_file, "rb").read())
   Encoders.encode_base64(part)
   part.add_header('Content-Disposition', 'attachment; filename="%s"' % os.path.basename(email_attachment_file))
   msg.attach(part)

   print "[+] Attempting to connect to server"
   timeout = 10
   smtp = smtplib.SMTP(smtp_server, smtp_port, timeout)
   if (start_tls):
      print "[+] Attempting to use STARTTLS"
      smtp.starttls()
   print "[+] Attempting to say ehlo"
   smtp.ehlo(ehlo_name)
   print "[+] Attempting to send mail"
   smtp.sendmail(send_from, send_to, msg.as_string())
   smtp.close()
   print "[+] Done..."

if __name__ == '__main__':

   parser = argparse.ArgumentParser()
   parser.add_argument('-s', '--server', action='store', dest='smtp_server', type=str, required=True, help='SMTP server address.')
   parser.add_argument('-p', '--port', action='store', dest='smtp_port', type=int, required=True, help='SMTP server port.')
   parser.add_argument('-e', '--ehlo', action='store', dest='ehlo_name', type=str, required=True, help='SMTP EHLO hostname.')
   parser.add_argument('-b', '--body', action='store', dest='email_body_file', type=str, required=True, help='Email body payload file.')
   parser.add_argument('-a', '--attachment', action='store', dest='email_attachment_file', type=str, required=True, help='File to send as an attachment.')
   parser.add_argument('-j', '--subject', action='store', dest='email_subject', type=str, required=True, help='A brief summary of the topic of the message.')
   parser.add_argument('-f', '--sendfrom', action='store', dest='send_from', type=str, required=True, help='The email address to use as a sender.')
   parser.add_argument('-d', '--showfrom', action='store', dest='show_from', type=str, required=True, help='The email address or name displayed to the target.')
   parser.add_argument('-t', '--sendto', action='store', dest='send_to', type=str, required=True, help='The email address to use as the primary recipient.')
   parser.add_argument('--plain', action='store_true', dest='email_body_is_plain', help='Setup email to Plain format.')
   parser.add_argument('--html', action='store_true', dest='email_body_is_html', help='Setup email to HTML format.')
   parser.add_argument('--tls', action='store_true', dest='start_tls', help='Connect to the STMP service using STARTTLS.')

   args = parser.parse_args()

   if (args.email_body_is_plain):
      send_plain_mail(args.smtp_server, args.smtp_port, args.start_tls, args.ehlo_name, args.email_body_file, args.email_attachment_file, args.email_subject, args.send_from, args.show_from, args.send_to)

   elif (args.email_body_is_html):
      send_html_mail(args.smtp_server, args.smtp_port, args.start_tls, args.ehlo_name, args.email_body_file, args.email_attachment_file, args.email_subject, args.send_from, args.show_from, args.send_to)

   else:
	sys.exit("\n\nPlease select a email body format. Eg. --plain or --html\n\n")

